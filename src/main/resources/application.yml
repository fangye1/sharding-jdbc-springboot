server:
  port: 8081
spring:
  shardingsphere:
    props:
      sql:
        show: true
    orchestration:
      registry:
        #操作超时的毫秒数，默认500毫秒
        operation-timeout-milliseconds: 600000
    datasource:
      names: ds0,ds0slave,ds1,ds1slave
      ds0:
        driverClassName: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        jdbcUrl: jdbc:mysql://192.168.16.128:3306/ds0?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&serverTimezone=UTC
        username: root
        password: 123456
        # hikari 的线程池配置
        maximumPoolSize: 20
        minimumIdle: 10
      ds0slave:
        driverClassName: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        jdbcUrl: jdbc:mysql://192.168.16.129:3306/ds0?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&serverTimezone=UTC
        username: root
        password: 123456
        # hikari 的线程池配置
        maximumPoolSize: 20
        minimumIdle: 10
      ds1:
        driverClassName: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        jdbcUrl: jdbc:mysql://192.168.16.128:3306/ds1?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&serverTimezone=UTC
        username: root
        password: 123456
        # hikari 的线程池配置
        maximumPoolSize: 20
        minimumIdle: 10
      ds1slave:
        driverClassName: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        jdbcUrl: jdbc:mysql://192.168.16.129:3306/ds1?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&serverTimezone=UTC
        username: root
        password: 123456
        # hikari 的线程池配置
        maximumPoolSize: 20
        minimumIdle: 10
    sharding:
      #未分片表的默认数据库
      default-data-source-name: ds0
      #读写分离
      master-slave-rules:
        ds0:
          master-data-source-name: ds0
          slave-data-source-names: ds0slave
        ds1:
          master-data-source-name: ds1
          slave-data-source-names: ds1slave
      tables:
        #分表案例
        users:
          actual-data-nodes: ds0.users_$->{0..1}
          key-generator:
            column: id
            type: SNOWFLAKE
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: users_$->{id % 2}
        #分表分库案例
        user_pack_records:
          actual-data-nodes: ds0.user_pack_records_$->{2018..2019},ds1.user_pack_records_$->{2020..2021}
          key-generator:
            column: id
            type: SNOWFLAKE
          database-strategy:
            standard:
              sharding-column: start_time
              precise-algorithm-class-name: com.sharding.jdbc.algorithm.db.UserPackRecordsAlgorithm
              range-algorithm-class-name: com.sharding.jdbc.algorithm.db.UserPackRecordsAlgorithm
          table-strategy:
            standard:
              sharding-column: start_time
              precise-algorithm-class-name: com.sharding.jdbc.algorithm.table.UserPackRecordsAlgorithm
              range-algorithm-class-name: com.sharding.jdbc.algorithm.table.UserPackRecordsAlgorithm
mybatis:
  configuration:
    map-underscore-to-camel-case: true
  type-handlers-package: com.sharding.jdbc.convert